import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  Stepper,
  Step,
  StepLabel,
  Button,
  CircularProgress,
  Alert,
  Grid,
} from '@mui/material';
import { useDispatch, useSelector } from 'react-redux';
import { AppDispatch, RootState } from '../../store';
import SecurityCheckStep from '../../components/Devices/ValidationSteps/SecurityCheckStep';
import ConfigurationStep from '../../components/Devices/ValidationSteps/ConfigurationStep';
import ComplianceStep from '../../components/Devices/ValidationSteps/ComplianceStep';
import ValidationSummary from '../../components/Devices/ValidationSteps/ValidationSummary';
import { startDeviceValidation, completeValidationStep } from '../../store/slices/deviceValidationSlice';

const steps = ['Security Check', 'Configuration Verification', 'Compliance Check', 'Summary'];

const DeviceValidation: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const [activeStep, setActiveStep] = useState(0);
  const [validationId, setValidationId] = useState<string>('');
  const { currentDevice, validationResults, loading, error } = useSelector(
    (state: RootState) => state.deviceValidation
  );

  useEffect(() => {
    if (!validationId && currentDevice) {
      dispatch(startDeviceValidation(currentDevice.id))
        .then((action) => {
          if (startDeviceValidation.fulfilled.match(action)) {
            setValidationId(action.payload.validationId);
          }
        });
    }
  }, [dispatch, currentDevice, validationId]);

  const handleNext = async () => {
    try {
      await dispatch(completeValidationStep({
        validationId,
        step: activeStep,
        stepData: validationResults[activeStep]
      }));
      setActiveStep((prevStep) => prevStep + 1);
    } catch (error) {
      console.error('Error completing validation step:', error);
    }
  };

  const handleBack = () => {
    setActiveStep((prevStep) => prevStep - 1);
  };

  const renderStepContent = (step: number) => {
    switch (step) {
      case 0:
        return (
          <SecurityCheckStep
            deviceId={currentDevice?.id}
            validationId={validationId}
            onComplete={(results) => {
              dispatch(completeValidationStep({
                validationId,
                step,
                stepData: results
              }));
            }}
          />
        );
      case 1:
        return (
          <ConfigurationStep
            deviceId={currentDevice?.id}
            validationId={validationId}
            onComplete={(results) => {
              dispatch(completeValidationStep({
                validationId,
                step,
                stepData: results
              }));
            }}
          />
        );
      case 2:
        return (
          <ComplianceStep
            deviceId={currentDevice?.id}
            validationId={validationId}
            onComplete={(results) => {
              dispatch(completeValidationStep({
                validationId,
                step,
                stepData: results
              }));
            }}
          />
        );
      case 3:
        return (
          <ValidationSummary
            deviceId={currentDevice?.id}
            validationId={validationId}
            results={validationResults}
          />
        );
      default:
        return null;
    }
  };

  if (loading && !validationId) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box m={2}>
        <Alert severity="error">{error}</Alert>
      </Box>
    );
  }

  return (
    <Box>
      <Paper sx={{ p: 3, mb: 3 }}>
        <Typography variant="h5" gutterBottom>
          Device Validation
        </Typography>
        {currentDevice && (
          <Typography color="textSecondary" gutterBottom>
            Device: {currentDevice.manufacturer} {currentDevice.model} ({currentDevice.deviceId})
          </Typography>
        )}
        <Stepper activeStep={activeStep} sx={{ mt: 3, mb: 4 }}>
          {steps.map((label) => (
            <Step key={label}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>

        <Box sx={{ mt: 4, mb: 2 }}>
          {renderStepContent(activeStep)}
        </Box>

        <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3 }}>
          <Button
            disabled={activeStep === 0}
            onClick={handleBack}
            sx={{ mr: 1 }}
          >
            Back
          </Button>
          <Button
            variant="contained"
            onClick={handleNext}
            disabled={loading}
          >
            {activeStep === steps.length - 1 ? 'Finish' : 'Next'}
            {loading && <CircularProgress size={24} sx={{ ml: 1 }} />}
          </Button>
        </Box>
      </Paper>
    </Box>
  );
};

export default DeviceValidation;
